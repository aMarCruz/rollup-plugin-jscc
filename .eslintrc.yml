root: true

  ###########################################################################
  #   ENVIRONMENT                                                           #
  ###########################################################################

env:
  node: true
  es6: true

ecmaFeatures:
  modules: true

parserOptions:
  ecmaVersion: 6
  sourceType: "module"

  ###########################################################################
  #   GLOBALS                                                               #
  ###########################################################################

#globals:
#  require: true

  ###########################################################################
  #   RECOMMENDED PRESET - mainly for possible errors                       #
  ###########################################################################

extends: "eslint:recommended"   # See https://github.com/eslint/eslint/blob/master/conf/eslint.json

  ###########################################################################
  #   RULES - omitted defaults and rules in eslint:recommended              #
  ###########################################################################

rules:
  #
  #   POSSIBLE ERRORS
  #
  no-extra-parens:              # disallow unnecessary parentheses
    - 2
    - "all"
    - conditionalAssign: false
      returnAssign: false
  no-unexpected-multiline: 2    # Avoid code that looks like two expressions but is actually one
  valid-jsdoc:
    - 2
    - prefer: { return: "returns" }
      requireReturn: false
      requireReturnDescription: false
  #
  #   BEST PRACTICES
  #
  block-scoped-var: 2           # treat var statements as if they were block scoped
  complexity: [2, 16]           # specify the maximum cyclomatic complexity allowed in a program
  consistent-return: 2          # require return statements to either always or never specify values
  curly: [2, "multi-line"]      # specify curly brace convention for multi-line control statements
  dot-location: [2, "property"] # dot in a member expression should be on the same line as the property
  dot-notation: 1               # encourages use of dot notation whenever possible
  eqeqeq: [2, "smart"]          # require the use of === and !==
  guard-for-in: 1               # make sure for-in loops have an if statement
  no-alert: 2                   # disallow the use of alert, confirm, and prompt
  no-caller: 2                  # disallow use of arguments.caller or arguments.callee
  no-case-declarations: 2       # disallow lexical declarations (let, const, function, class) in case/default clauses
  no-div-regex: 2               # disallow division operators explicitly at beginning of regular expression
  no-else-return: 2             # disallow else after a return in an if
  no-eval: 2                    # disallow use of eval()
  no-extend-native: 2           # disallow adding to native types
  no-extra-bind: 2              # disallow unnecessary function binding
  no-floating-decimal: 2        # disallow the use of leading or trailing decimal points in numeric literals
  no-implied-eval: 2            # disallow use of eval()-like methods
  no-invalid-this: 2            # disallow this keywords outside of classes or class-like objects
  no-iterator: 2                # disallow usage of "iterator" property
  no-labels: 2                  # disallow use of labeled statements (Default 0)
  no-lone-blocks: 2             # disallow unnecessary nested blocks
  no-loop-func: 2               # disallow creation of functions within loops
  no-multi-str: 2               # disallow use of multiline strings
  no-native-reassign: 2         # disallow reassignments of native objects
  no-new-func: 2                # disallow use of new operator for Function object
  no-new-wrappers: 2            # disallows creating new instances of String, Number, and Boolean
  no-new: 2                     # disallow use of new operator when not part of the assignment or comparison
  no-octal-escape: 2            # disallow use of octal escape sequences in string literals
  no-proto: 2                   # disallow usage of __proto__ property
  no-redeclare: 2               # disallow declaring the same variable more then once
  no-return-assign:             # disallow use of assignment in return statement
    - 2
    - "except-parens"
  no-script-url: 2              # disallow use of javascript urls.
  no-self-compare: 2            # disallow comparisons where both sides are exactly the same
  no-sequences: 2               # disallow use of comma operator
  no-throw-literal: 2           # restrict what can be thrown as an exception
  no-unused-expressions: 2      # disallow usage of expressions in statement position
  no-useless-call: 2            # disallow unnecessary .call() and .apply()
  no-with: 2                    # disallow use of the with statement
  radix: 2                      # require use of the second argument for parseInt()
  wrap-iife: [2, "inside"]      # require immediate function invocation to be wrapped in parentheses
  yoda: [2, "never"]            # require or disallow Yoda conditions
  #
  #   STRICT MODE
  #
  #strict: [2, "global"]        # require run in strict mode
  #strict: 2                    # require strict mode
  #
  #   VARIABLES
  #
  no-catch-shadow: 2              # disallow the catch clause parameter shadows an existing variable
  no-label-var: 2                 # disallow labels that share a name with a variable
  no-shadow: 2                    # disallow declaration of variables already declared in the outer scope
  no-shadow-restricted-names: 2   # disallow shadowing of names such as arguments
  no-undef: 2                     # disallow use of undeclared variables unless mentioned in a /*global */ block
  no-undef-init: 2                # disallow use of undefined when initializing variables
  no-use-before-define:           # disallow use of variables (no functions) before they are defined
    - 2
    - "nofunc"
  #
  #   NODE
  #
  handle-callback-err: 2          # enforces error handling in callbacks
  no-mixed-requires: 2            # disallow mixing regular variable and require declarations
  no-new-require: 2               # disallow use of new operator with the require function
  no-path-concat: 2               # disallow string concatenation with __dirname and __filename
  #
  #   STYLISTIC ISSUES
  #
  array-bracket-spacing: 2        # disallow spaces inside of brackets
  brace-style:                    # enforce 1tbs brace style
   - 2
   - "1tbs"
   - allowSingleLine: true
  camelcase: 2                    # require camel case names
  comma-spacing: 2                # enforce spacing after comma
  comma-style: 2                  # enforce comma at the right side
  computed-property-spacing: 2    # disallow spaces inside of computed properties
  consistent-this: [2, "self"]    # enforces consistent naming when capturing the current execution context
  eol-last: 2                     # enforces newline at the end of file, with no multiple empty lines
  indent:                         # Set a specific indentation width
    - 2
    - 2
    - SwitchCase: 1
      VariableDeclarator: 2
  key-spacing:                    # enforces spacing between keys and values in object literal properties
    - 2
    - mode: minimum
  keyword-spacing: 2              # enforces spacing before and after keywords
  linebreak-style: [2, "unix"]
  max-depth: [2, 5]               # maximum depth blocks can be nested
  max-len:                        # maximum line length is 96, except for urls and regexes
    - 2
    - 96
    - 4
    - ignoreUrls: true
      ignorePattern: "=\\s+/.+/"
  max-nested-callbacks: [2, 5]    # specify the maximum depth callbacks can be nested
  new-cap: 2                      # require a capital letter for constructors
  new-parens: 2                   # disallow omission of parentheses with a constructor with no arguments
  no-array-constructor: 2         # disallow use of the Array constructor
  no-lonely-if: 2                 # disallow if as the only statement in an else block
  no-mixed-spaces-and-tabs: 2     # disallow mixed spaces and tabs for indentation
  no-multiple-empty-lines:
    - 2
    - max: 2                      # disallow more than 2 succesive empty lines
  no-new-object: 2                # disallow use of the Object constructor
  no-spaced-func: 2               # disallow space between function identifier and application
  no-trailing-spaces: 2           # disallow trailing whitespace at the end of lines
  no-unneeded-ternary: 2          # disallow the use of ternary operators when a simpler alternative exists
  operator-linebreak: 2
  quote-props: [2, "as-needed"]   # require quotes around object literal property names only if needed
  quotes:
    - 2
    - "single"
    - "avoid-escape"              # require single quotes
  semi-spacing: 2                 # prevents the use of spaces before a semicolon in expressions
  semi: [2, "never"]              # require or disallow use of semicolons instead of ASI
  space-before-blocks: 2          # require a space before blocks
  space-before-function-paren: 2  # require a space before function parenthesis
  space-in-parens: 2              # disallow spaces inside parentheses expect for '()'
  space-infix-ops:
    - 2
    - int32Hint: false            # require spaces around infix operators, expect for `var|0`
  space-unary-ops: 2              # require spaces after new, delete, typeof, void, yield, disallow spaces for ++, --, etc
  object-curly-spacing:
    - 2
    - "always"
    - objectsInObjects: false     # require spaces inside brackets
