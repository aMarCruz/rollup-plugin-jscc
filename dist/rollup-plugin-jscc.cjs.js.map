{"version":3,"file":null,"sources":["../src/util/regexes.js","../src/jscc/revars.js","../src/jscc/parseoptions.js","../src/jscc/evalexpr.js","../src/jscc/codeparser.js","../src/jscc/remapvars.js","../src/jscc/preproc.js","../src/util/filter.js","../src/index.js"],"sourcesContent":["/**\n * @module regexes\n *\n * Shared regexes\n */\n/* eslint-disable max-len */\n\n// Multi-line comment\nexport const MLCOMMS = /\\/\\*[^*]*\\*+(?:[^*\\/][^*]*\\*+)*\\//g\n\n// Single-line comment\nexport const SLCOMMS = /\\/\\/.*$/g\n\n// Quoted strings, take care about embedded eols\nexport const STRINGS = /\"[^\"\\n\\\\]*(?:\\\\[\\S\\s][^\"\\n\\\\]*)*\"|'[^'\\n\\\\]*(?:\\\\[\\S\\s][^'\\n\\\\]*)*'|`[^`\\\\]*(?:\\\\[\\S\\s][^`\\\\]*)*`/g\n\n// Allows skip division operators to detect non-regex slash -- $1: the slash\nexport const DIVISOR = /(?:\\b(?:return|yield)\\s+|<\\/[-a-zA-Z]|(?:[$\\w\\)\\]]|\\+\\+|--)\\s*\\/(?![*\\/]))/g\n\n// Matches regexes -- $1 last slash of the regex\nexport const REGEXES = /\\/(?=[^*\\/>])[^[/\\\\]*(?:(?:\\[(?:\\\\.|[^\\]\\\\]*)*\\]|\\\\.)[^[/\\\\]*)*?(\\/)[gim]*/g\n\n// Matches valid HTML comments (allowed in ES6 code)\nexport const HTMLCOMMS = /<!--(?!>)[\\S\\s]*?-->/g\n\n// Matches the start of a comment\nexport const ISCOMMENT = /^(?:<--|\\/\\*|\\/\\/)/\n","/**\n * @module regexlist\n */\nexport {\n  MLCOMMS,\n  SLCOMMS,\n  STRINGS,\n  DIVISOR,\n  REGEXES,\n  HTMLCOMMS,\n  ISCOMMENT } from './../util/regexes'\n\n// The constant values of this module\n\nexport const VARPAIR = /^\\s*(__[0-9A-Z][_0-9A-Z]*)\\s*=?(.*)/\nexport const VARNAME = /^__[0-9A-Z][_0-9A-Z]*$/\n\n// var names inside expression\nexport const EVLVARS = /(^|[^$\\w\\.])(__[0-9A-Z][_0-9A-Z]*)\\b(?=[^$\\w]|$)/g\n\n// var names inside the code\nexport const REPVARS = /(^|[^\\w\\.])(?!$\\$)\\$(__[0-9A-Z][_0-9A-Z]*)\\b(?=[^$\\w]|$)/g\n","\nimport { VARNAME } from './revars'\nimport { relative } from 'path'\n\nconst _filters = {\n  // only preserve license\n  license:  /^@license\\b/,\n  // (almost) like the uglify defaults\n  some:     /(?:@license|@preserve|@cc_on)\\b/,\n  // http://usejsdoc.org/\n  jsdoc:    /^\\/\\*\\*[^@]*@[A-Za-z]/,\n  // http://www.jslint.com/help.html\n  jslint:   /^\\/[*\\/](?:jslint|global|property)\\b/,\n  // http://jshint.com/docs/#inline-configuration\n  jshint:   /^\\/[*\\/]\\s*(?:jshint|globals|exported)\\s/,\n  // http://eslint.org/docs/user-guide/configuring\n  eslint:   /^\\/[*\\/]\\s*(?:eslint(?:\\s|-[ed])|global\\s)/,\n  // http://jscs.info/overview\n  jscs:     /^\\/[*\\/]\\s*jscs:[ed]/,\n  // https://gotwarlost.github.io/istanbul/\n  istanbul: /^\\/[*\\/]\\s*istanbul\\s/,\n  // http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/\n  srcmaps:  /\\/\\/#\\ssource(Mapping)URL=/,\n  // preserve html comments\n  html:    /<!--(?!>)[\\S\\s]*?-->/\n}\n\nexport default function parseOptions (filename, options) {\n  if (!options) options = {}\n\n  function _file (s) {\n    return s && relative(process.cwd(), filename).replace(/\\\\/g, '/') || ''\n  }\n\n  // sallow copy of the values, for per file basis\n  let values = {}\n  let source = options.values\n  if (source) {\n    if (typeof source != 'object') {\n      throw new Error('values must be an plain object')\n    } else {\n      Object.keys(source).forEach(v => {\n        if (!VARNAME.test(v)) {\n          throw new Error(`invalid variable name: ${ v }`)\n        }\n        values[v] = source[v]\n      })\n    }\n  }\n\n  // file is readonly and valid only for this instance\n  Object.defineProperty(values, '__FILE', {\n    value: _file(filename),\n    enumerable: true\n  })\n\n  // multiple forms tu specify comment filters, default is 'some'\n  let comments = options.comments\n  if (comments == null) {\n    comments = [_filters.some]\n  } else if (comments === 'all') {\n    comments = true\n  } else if (comments === 'none') {\n    comments = false\n  } else if (typeof comments != 'boolean') {\n    let filters = Array.isArray(comments) ? comments : [comments]\n    comments = []\n    filters.forEach(f => {\n      if (f instanceof RegExp) {\n        comments.push(f)\n      } else if (typeof f != 'string') {\n        throw new Error('type mismatch in comment filter.')\n      } else if (f in _filters) {\n        comments.push(_filters[f])\n      } else {\n        throw new Error(`unknown comments filter \"${ f }\"`)\n      }\n    })\n  }\n\n  return {\n    sourceMap: options.sourceMap !== false,\n    comments,\n    values\n  }\n}\n","\nimport { STRINGS, DIVISOR, REGEXES, EVLVARS } from './revars'\n\n// For replacing of jspreproc variables (#set)\nconst _REPVARS = RegExp(\n    STRINGS.source + '|' +\n    DIVISOR.source + '|' +\n    REGEXES.source + '|' +     // $1 can have '/'\n    EVLVARS.source,            // $2 = prefix, $3 = var name\n  'g')\n\n/**\n * Method to perform the evaluation of the received string using\n * a function instantiated dynamically.\n *\n * @param   {string} str - String to evaluate, can include other defined vars\n * @param   {object} ctx - Set of variable definitions\n * @returns {any}          The result.\n */\nexport default function evalExpr (str, ctx) {\n\n  // var replacement\n  function _repVars (m, _, p, v) {\n    return v\n      ? p + (v in ctx ? 'this.' + v : v in global ? 'global.' + v : 'undefined')\n      : m\n  }\n\n  let expr = str\n    .replace(/\\n/g, '\\\\n')\n    .replace(/\\r/g, '\\\\r')\n    .replace(_REPVARS, _repVars)\n\n  let result\n\n  try {\n    // eslint-disable-next-line no-new-func\n    let fn = new Function('', 'return (' + expr + ');')\n    result = fn.call(ctx)\n  } catch (e) {\n    console.error(`In expression: ${ expr }`)  // eslint-disable-line no-console\n    throw e\n  }\n\n  return result\n}\n","/*\n    Parser for conditional comments\n */\nimport evalExpr from './evalexpr'\nimport { VARPAIR, VARNAME } from './revars'\n\nconst NONE = 0\nconst IF   = 1\nconst ELSE = 2\n\nconst WORKING = 0\nconst TESTING = 1\nconst ENDING  = 2\n\nconst JSCC = /^(?:\\/\\/|\\/\\*|<!--)#(if|ifn?set|el(?:if|se)|endif|set|unset|error)(?=[ \\t\\n\\*]|-->|$)(-->|.*)/\nconst COMM = /^(?:\\/\\/|\\/\\*|<!--)/\n\nfunction atStart (code, pos) {\n  --pos\n  do {\n    if (pos < 0 || code[pos] === '\\n') return true\n  } while (/\\s/.test(code[pos--]))\n  return false\n}\n\n\n/**\n * Conditional comments parser\n *\n * @param {object} options - The global options\n * @class\n */\nexport default function CodeParser (options) {\n\n  this.options = options\n  this.cc = [{\n    state: WORKING,\n    block: NONE\n  }]\n}\n\n\nCodeParser.prototype = {\n\n  _emitError (str) {\n    //str = `jspp [${ this.cc.fname || 'input' }] : ${ str }`\n    throw new Error(str)\n  },\n\n  /**\n   * Removes trailing singleline comment or the start of multiline comment\n   * and checks if required expression is present.\n   *\n   * @param   {string} ckey - The key name\n   * @param   {string} expr - The extracted expression\n   * @returns {string}      Normalized expression.\n   */\n  _normalize (ckey, expr) {\n    expr = expr.replace(/(?:\\*\\/|-->).*/, '').trim()\n\n    // all keywords must have an expression, except `#else/#endif`\n    if (!expr && ckey !== 'else' && ckey !== 'endif') {\n      this._emitError('Expression expected for #' + ckey)\n    }\n    return expr\n  },\n\n  /**\n   * Expression evaluation for `#if-#ifset-#ifnset`.\n   * Intercepts the `#ifset-#ifnset` shorthands, call `evalExpr` for `#if` statements.\n   * @param   {string} ckey - The key name\n   * @param   {string} expr - The extracted expression\n   * @returns {string}      Evaluated expression as string.\n   */\n  _getValue (ckey, expr) {\n    if (ckey !== 'if') {\n      let yes = expr in this.options.values ? 1 : 0\n\n      return ckey === 'ifnset' ? yes ^ 1 : yes\n    }\n    // returns the raw value of the expression\n    return evalExpr(expr, this.options.values)\n  },\n\n  // Inner helper - throws if the current block is not of the expected type\n  checkInBlock (info, key, mask) {\n    let block = info.block\n    let isIn  = block && block === (block & mask)\n\n    if (!isIn) this._emitError('Unexpected #' + key)\n  },\n\n  /**\n   * Parses conditional comments to determinate if we need disable the output.\n   *\n   * @param   {Object} data - Object with the directive, created by parse\n   * @returns {boolean}       Output state, `false` for hide the output.\n   */\n  checkOutput (data) {\n    let cc     = this.cc\n    let last   = cc.length - 1\n    let ccInfo = cc[last]\n    let state  = ccInfo.state\n    let key    = data.key\n    let expr   = this._normalize(key, data.expr)\n\n    switch (key) {\n      // Conditional blocks -- `#if-ifset-ifnset` pushes the state and `#endif` pop it\n      case 'if':\n      case 'ifset':\n      case 'ifnset':\n        state = state === ENDING ? ENDING : this._getValue(key, expr) ? WORKING : TESTING\n        cc[++last] = {\n          state,\n          block: IF\n        }\n        break\n\n      case 'elif':\n        this.checkInBlock(ccInfo, key, IF)\n        if (state === TESTING && this._getValue('if', expr)) {\n          ccInfo.state = state = WORKING\n        } else if (state === WORKING) {\n          ccInfo.state = state = ENDING\n        }\n        break\n\n      case 'else':\n        this.checkInBlock(ccInfo, key, IF)\n        ccInfo.block = ELSE\n        ccInfo.state = state = state === TESTING ? WORKING : ENDING\n        break\n\n      case 'endif':\n        this.checkInBlock(ccInfo, key, IF | ELSE)\n        cc.pop()\n        --last\n        state = cc[last].state\n        break\n\n      default:\n        // set-unset-error is processed only for working blocks\n        if (state === WORKING) {\n          switch (key) {\n            case 'set':\n              this._set(expr)\n              break\n            case 'unset':\n              this._unset(expr)\n              break\n            case 'error':\n              this._error(expr)\n              break\n            // istanbul ignore next: just in case\n            default:\n              this._emitError('Unknown directive #' + key)\n              break\n          }\n        }\n        break\n    }\n\n    return state === WORKING\n  },\n\n  _adjustBlock (block) {\n    // special case for hidden blocks\n    if (block.slice(0, 2) === '/*') {\n      let end = block.search(/\\*\\/|-->|\\n/)\n\n      if (~end && block[end] === '\\n') {\n        // trim avoids cut original \\r\\n eols\n        block = block.slice(0, end).trim()\n      }\n    }\n    return block\n  },\n\n  /**\n   * Check if the line is a conditional comment\n   *\n   * @param   {string} code  - Full source code (untouched)\n   * @param   {string} block - Unparsed comment block\n   * @param   {number} start - Offset of comment inside `code`\n   * @returns {object}         Object with info about the comment.\n   */\n  parse (code, block, start) {\n    let match  = block.match(COMM)\n    let result = false\n\n    if (match) {\n      match = block.match(JSCC)\n      if (match && atStart(code, start)) {\n        block  = this._adjustBlock(block)\n        result = { type: 'JSCC', block, key: match[1], expr: match[2] }\n      } else {\n        result = { type: 'COMM', block }\n      }\n    }\n    return result\n  },\n\n  /**\n   * Check unclosed blocks before vanish.\n   */\n  close () {\n    if (this.cc.length > 1) {\n      this._emitError('Unclosed conditional block')\n    }\n    this.options = false\n  },\n\n  _set (s) {\n    let m = s.match(VARPAIR)\n    if (m) {\n      let k = m[1]\n      let v = m[2]\n\n      this.options.values[k] = v ? evalExpr(v.trim(), this.options.values) : undefined\n    } else {\n      this._emitError(`Invalid symbol or declaration \"${ s }\"`)\n    }\n  },\n\n  _unset (s) {\n    let def = s.match(VARNAME)\n    if (def) {\n      delete this.options.values[s]\n    } else {\n      this._emitError(`Invalid symbol name \"${ s }\"`)\n    }\n  },\n\n  _error (s) {\n    s = s && evalExpr(s, this.options.values) || 'Error'\n    throw new Error('' + s)\n  }\n}\n","\nimport { REPVARS } from './revars'\n\n// for matching all vars inside code\nexport function remapVars (magicStr, values, str, start) {\n  let re = REPVARS\n  let mm\n  let changes = false\n\n  re.lastIndex = 0  // `re` is global, so reset\n\n  while ((mm = re.exec(str))) {\n    let v = mm[2]\n    if (v && v in values) {\n      let idx = start + mm.index + mm[1].length\n      magicStr.overwrite(idx, idx + v.length + 1, '' + values[v])\n      changes = true\n    }\n  }\n\n  return changes\n}\n","/**\n * rollup-plugin-jspp entry point\n * @module\n */\nimport MagicString from 'magic-string'\nimport parseOptions from './parseoptions'\nimport CodeParser from './codeparser'\nimport { remapVars } from './remapvars'\nimport { MLCOMMS, SLCOMMS, HTMLCOMMS, STRINGS, DIVISOR, REGEXES } from './revars'\n\nconst QBLOCKS = RegExp([\n  MLCOMMS.source,                  // --- multi-line comment\n  SLCOMMS.source,                  // --- single-line comment\n  HTMLCOMMS.source,                // --- html multi-line comment\n  STRINGS.source,                  // --- string, don't care about embedded eols\n  DIVISOR.source,                  // $1: division operator\n  REGEXES.source                   // $2: last slash of regex\n].join('|'), 'gm')\n\n\nexport default function preproc (code, filename, _options) {\n\n  const opts      = parseOptions(filename, _options)\n  const magicStr  = new MagicString(code)\n  const parser    = new CodeParser(opts)\n\n  let changes = false\n  let output  = true\n  let re = QBLOCKS\n\n  let lastIndex\n  let match\n\n  // normalize eols - replacement here does NOT affect the result\n  if (~code.indexOf('\\r')) {\n    code = code.replace(/\\r\\n/g, '\\n\\n').replace(/\\r/g, '\\n')\n  }\n  re.lastIndex = lastIndex = 0\n\n  while ((match = re.exec(code))) {\n\n    let index = match.index\n    let block = match[0]\n    if (match[1] || match[2] || /['\"`]/.test(block[0])) continue\n\n    let comment = parser.parse(code, block, index)\n    if (comment) {\n      pushCache(code.slice(lastIndex, index), lastIndex, output)\n\n      block = comment.block   // parse can change the length\n\n      if (comment.type === 'JSCC') {\n        re.lastIndex = index + block.length\n        output = parser.checkOutput(comment)\n        pushCache(block, index, false)\n      } else {\n        pushCache(block, index, output && canOut(block))\n      }\n\n      lastIndex = re.lastIndex\n    }\n  }\n\n  parser.close()  // let parser to detect unbalanced blocks\n\n  if (code.length > lastIndex) {\n    pushCache(code.slice(lastIndex), lastIndex, output)\n  }\n\n  // by getting the code from magicString, we keep original line-endings\n  let result = {\n    code: magicStr.toString()\n  }\n  if (changes && opts.sourceMap) {\n    result.map = magicStr.generateMap({ hires: true })\n  }\n  return result\n\n\n  // helpers ==============================================\n\n  function pushCache (str, start, out) {\n    if (!str) return\n\n    if (!out) {\n      magicStr.overwrite(start, start + str.length, ' ')\n      changes = true\n\n    } else if (~str.indexOf('$__')) {\n      changes = remapVars(magicStr, opts.values, str, start) || changes\n    }\n  }\n\n  // Array.find is not available in node 0.12\n  function canOut (str) {\n    let oc = opts.comments\n\n    if (oc && oc !== true) {\n      for (var i = 0; i < oc.length; i++) {\n        if (oc[i].test(str)) return true\n      }\n      oc = false\n    }\n    return oc\n  }\n}\n","\nimport { createFilter } from 'rollup-pluginutils'\nimport { extname } from 'path'\n\n/**\n * Creates a filter for the options `include`, `exclude`, and `extensions`.\n * Since `extensions` is not a rollup option, I think is widely used.\n *\n * @param {object} opts? - The user options\n * @returns {function}     Filter function that returns true if a given\n *                         file matches the filter.\n */\nexport default function _createFilter (opts) {\n  if (!opts) opts = {}\n\n  const filt = createFilter(opts.include, opts.exclude)\n  const exts = opts.extensions\n             ? opts.extensions.map(e => (e[0] !== '.' ? '.' + e : e).toLowerCase())\n             : ['.js']\n\n  return function (name) {\n    return filt(name) && exts.indexOf(extname(name).toLowerCase()) > -1\n  }\n}\n","/**\n * rollup-plugin-jscc entry point\n * @module\n */\nimport preproc from './jscc/preproc'\nimport createFilter from './util/filter'\nimport { readFileSync } from 'fs'\n\nexport default function jspp (options) {\n\n  const filter = createFilter(options)\n\n  return {\n\n    name: 'jscc',\n\n    load (id) {\n      if (filter(id)) {\n        let code = readFileSync(id, 'utf8')\n        return preproc(code, id, options)\n      }\n      return null\n    }\n  }\n}\n"],"names":["const","relative","let","createFilter","extname","readFileSync"],"mappings":"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"}